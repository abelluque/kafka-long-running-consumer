/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Integracion.Esquemas.Referencias;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DatosPersonales extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2070184898530772693L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DatosPersonales\",\"namespace\":\"Integracion.Esquemas.Referencias\",\"fields\":[{\"name\":\"numeroDeDocumento\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nombreCompleto\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"idInternoDelCliente\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eMail\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"telefonos\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Telefono\",\"fields\":[{\"name\":\"tipo\",\"type\":{\"type\":\"enum\",\"name\":\"TipoDeTelefono\",\"symbols\":[\"trabajo\",\"celular\",\"casa\",\"otro\"]}},{\"name\":\"numero\",\"type\":\"string\"}]}}],\"default\":null},{\"name\":\"agrupador\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"tipoDeDocumento\",\"type\":{\"type\":\"enum\",\"name\":\"TipoDeDocumento\",\"symbols\":[\"undefined\",\"DNI\",\"CUIT\",\"CUIL\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DatosPersonales> ENCODER =
      new BinaryMessageEncoder<DatosPersonales>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DatosPersonales> DECODER =
      new BinaryMessageDecoder<DatosPersonales>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DatosPersonales> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DatosPersonales> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DatosPersonales> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DatosPersonales>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DatosPersonales to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DatosPersonales from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DatosPersonales instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DatosPersonales fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence numeroDeDocumento;
   private java.lang.CharSequence nombreCompleto;
   private java.lang.CharSequence idInternoDelCliente;
   private java.lang.CharSequence eMail;
   private java.util.List<Integracion.Esquemas.Referencias.Telefono> telefonos;
   private java.lang.CharSequence agrupador;
   private Integracion.Esquemas.Referencias.TipoDeDocumento tipoDeDocumento;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DatosPersonales() {}

  /**
   * All-args constructor.
   * @param numeroDeDocumento The new value for numeroDeDocumento
   * @param nombreCompleto The new value for nombreCompleto
   * @param idInternoDelCliente The new value for idInternoDelCliente
   * @param eMail The new value for eMail
   * @param telefonos The new value for telefonos
   * @param agrupador The new value for agrupador
   * @param tipoDeDocumento The new value for tipoDeDocumento
   */
  public DatosPersonales(java.lang.CharSequence numeroDeDocumento, java.lang.CharSequence nombreCompleto, java.lang.CharSequence idInternoDelCliente, java.lang.CharSequence eMail, java.util.List<Integracion.Esquemas.Referencias.Telefono> telefonos, java.lang.CharSequence agrupador, Integracion.Esquemas.Referencias.TipoDeDocumento tipoDeDocumento) {
    this.numeroDeDocumento = numeroDeDocumento;
    this.nombreCompleto = nombreCompleto;
    this.idInternoDelCliente = idInternoDelCliente;
    this.eMail = eMail;
    this.telefonos = telefonos;
    this.agrupador = agrupador;
    this.tipoDeDocumento = tipoDeDocumento;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return numeroDeDocumento;
    case 1: return nombreCompleto;
    case 2: return idInternoDelCliente;
    case 3: return eMail;
    case 4: return telefonos;
    case 5: return agrupador;
    case 6: return tipoDeDocumento;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: numeroDeDocumento = (java.lang.CharSequence)value$; break;
    case 1: nombreCompleto = (java.lang.CharSequence)value$; break;
    case 2: idInternoDelCliente = (java.lang.CharSequence)value$; break;
    case 3: eMail = (java.lang.CharSequence)value$; break;
    case 4: telefonos = (java.util.List<Integracion.Esquemas.Referencias.Telefono>)value$; break;
    case 5: agrupador = (java.lang.CharSequence)value$; break;
    case 6: tipoDeDocumento = (Integracion.Esquemas.Referencias.TipoDeDocumento)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'numeroDeDocumento' field.
   * @return The value of the 'numeroDeDocumento' field.
   */
  public java.lang.CharSequence getNumeroDeDocumento() {
    return numeroDeDocumento;
  }


  /**
   * Sets the value of the 'numeroDeDocumento' field.
   * @param value the value to set.
   */
  public void setNumeroDeDocumento(java.lang.CharSequence value) {
    this.numeroDeDocumento = value;
  }

  /**
   * Gets the value of the 'nombreCompleto' field.
   * @return The value of the 'nombreCompleto' field.
   */
  public java.lang.CharSequence getNombreCompleto() {
    return nombreCompleto;
  }


  /**
   * Sets the value of the 'nombreCompleto' field.
   * @param value the value to set.
   */
  public void setNombreCompleto(java.lang.CharSequence value) {
    this.nombreCompleto = value;
  }

  /**
   * Gets the value of the 'idInternoDelCliente' field.
   * @return The value of the 'idInternoDelCliente' field.
   */
  public java.lang.CharSequence getIdInternoDelCliente() {
    return idInternoDelCliente;
  }


  /**
   * Sets the value of the 'idInternoDelCliente' field.
   * @param value the value to set.
   */
  public void setIdInternoDelCliente(java.lang.CharSequence value) {
    this.idInternoDelCliente = value;
  }

  /**
   * Gets the value of the 'eMail' field.
   * @return The value of the 'eMail' field.
   */
  public java.lang.CharSequence getEMail() {
    return eMail;
  }


  /**
   * Sets the value of the 'eMail' field.
   * @param value the value to set.
   */
  public void setEMail(java.lang.CharSequence value) {
    this.eMail = value;
  }

  /**
   * Gets the value of the 'telefonos' field.
   * @return The value of the 'telefonos' field.
   */
  public java.util.List<Integracion.Esquemas.Referencias.Telefono> getTelefonos() {
    return telefonos;
  }


  /**
   * Sets the value of the 'telefonos' field.
   * @param value the value to set.
   */
  public void setTelefonos(java.util.List<Integracion.Esquemas.Referencias.Telefono> value) {
    this.telefonos = value;
  }

  /**
   * Gets the value of the 'agrupador' field.
   * @return The value of the 'agrupador' field.
   */
  public java.lang.CharSequence getAgrupador() {
    return agrupador;
  }


  /**
   * Sets the value of the 'agrupador' field.
   * @param value the value to set.
   */
  public void setAgrupador(java.lang.CharSequence value) {
    this.agrupador = value;
  }

  /**
   * Gets the value of the 'tipoDeDocumento' field.
   * @return The value of the 'tipoDeDocumento' field.
   */
  public Integracion.Esquemas.Referencias.TipoDeDocumento getTipoDeDocumento() {
    return tipoDeDocumento;
  }


  /**
   * Sets the value of the 'tipoDeDocumento' field.
   * @param value the value to set.
   */
  public void setTipoDeDocumento(Integracion.Esquemas.Referencias.TipoDeDocumento value) {
    this.tipoDeDocumento = value;
  }

  /**
   * Creates a new DatosPersonales RecordBuilder.
   * @return A new DatosPersonales RecordBuilder
   */
  public static Integracion.Esquemas.Referencias.DatosPersonales.Builder newBuilder() {
    return new Integracion.Esquemas.Referencias.DatosPersonales.Builder();
  }

  /**
   * Creates a new DatosPersonales RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DatosPersonales RecordBuilder
   */
  public static Integracion.Esquemas.Referencias.DatosPersonales.Builder newBuilder(Integracion.Esquemas.Referencias.DatosPersonales.Builder other) {
    if (other == null) {
      return new Integracion.Esquemas.Referencias.DatosPersonales.Builder();
    } else {
      return new Integracion.Esquemas.Referencias.DatosPersonales.Builder(other);
    }
  }

  /**
   * Creates a new DatosPersonales RecordBuilder by copying an existing DatosPersonales instance.
   * @param other The existing instance to copy.
   * @return A new DatosPersonales RecordBuilder
   */
  public static Integracion.Esquemas.Referencias.DatosPersonales.Builder newBuilder(Integracion.Esquemas.Referencias.DatosPersonales other) {
    if (other == null) {
      return new Integracion.Esquemas.Referencias.DatosPersonales.Builder();
    } else {
      return new Integracion.Esquemas.Referencias.DatosPersonales.Builder(other);
    }
  }

  /**
   * RecordBuilder for DatosPersonales instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DatosPersonales>
    implements org.apache.avro.data.RecordBuilder<DatosPersonales> {

    private java.lang.CharSequence numeroDeDocumento;
    private java.lang.CharSequence nombreCompleto;
    private java.lang.CharSequence idInternoDelCliente;
    private java.lang.CharSequence eMail;
    private java.util.List<Integracion.Esquemas.Referencias.Telefono> telefonos;
    private java.lang.CharSequence agrupador;
    private Integracion.Esquemas.Referencias.TipoDeDocumento tipoDeDocumento;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Integracion.Esquemas.Referencias.DatosPersonales.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.numeroDeDocumento)) {
        this.numeroDeDocumento = data().deepCopy(fields()[0].schema(), other.numeroDeDocumento);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nombreCompleto)) {
        this.nombreCompleto = data().deepCopy(fields()[1].schema(), other.nombreCompleto);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.idInternoDelCliente)) {
        this.idInternoDelCliente = data().deepCopy(fields()[2].schema(), other.idInternoDelCliente);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eMail)) {
        this.eMail = data().deepCopy(fields()[3].schema(), other.eMail);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.telefonos)) {
        this.telefonos = data().deepCopy(fields()[4].schema(), other.telefonos);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.agrupador)) {
        this.agrupador = data().deepCopy(fields()[5].schema(), other.agrupador);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.tipoDeDocumento)) {
        this.tipoDeDocumento = data().deepCopy(fields()[6].schema(), other.tipoDeDocumento);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing DatosPersonales instance
     * @param other The existing instance to copy.
     */
    private Builder(Integracion.Esquemas.Referencias.DatosPersonales other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.numeroDeDocumento)) {
        this.numeroDeDocumento = data().deepCopy(fields()[0].schema(), other.numeroDeDocumento);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nombreCompleto)) {
        this.nombreCompleto = data().deepCopy(fields()[1].schema(), other.nombreCompleto);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.idInternoDelCliente)) {
        this.idInternoDelCliente = data().deepCopy(fields()[2].schema(), other.idInternoDelCliente);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eMail)) {
        this.eMail = data().deepCopy(fields()[3].schema(), other.eMail);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.telefonos)) {
        this.telefonos = data().deepCopy(fields()[4].schema(), other.telefonos);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.agrupador)) {
        this.agrupador = data().deepCopy(fields()[5].schema(), other.agrupador);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tipoDeDocumento)) {
        this.tipoDeDocumento = data().deepCopy(fields()[6].schema(), other.tipoDeDocumento);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'numeroDeDocumento' field.
      * @return The value.
      */
    public java.lang.CharSequence getNumeroDeDocumento() {
      return numeroDeDocumento;
    }


    /**
      * Sets the value of the 'numeroDeDocumento' field.
      * @param value The value of 'numeroDeDocumento'.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder setNumeroDeDocumento(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.numeroDeDocumento = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'numeroDeDocumento' field has been set.
      * @return True if the 'numeroDeDocumento' field has been set, false otherwise.
      */
    public boolean hasNumeroDeDocumento() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'numeroDeDocumento' field.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder clearNumeroDeDocumento() {
      numeroDeDocumento = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nombreCompleto' field.
      * @return The value.
      */
    public java.lang.CharSequence getNombreCompleto() {
      return nombreCompleto;
    }


    /**
      * Sets the value of the 'nombreCompleto' field.
      * @param value The value of 'nombreCompleto'.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder setNombreCompleto(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nombreCompleto = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nombreCompleto' field has been set.
      * @return True if the 'nombreCompleto' field has been set, false otherwise.
      */
    public boolean hasNombreCompleto() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nombreCompleto' field.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder clearNombreCompleto() {
      nombreCompleto = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'idInternoDelCliente' field.
      * @return The value.
      */
    public java.lang.CharSequence getIdInternoDelCliente() {
      return idInternoDelCliente;
    }


    /**
      * Sets the value of the 'idInternoDelCliente' field.
      * @param value The value of 'idInternoDelCliente'.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder setIdInternoDelCliente(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.idInternoDelCliente = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'idInternoDelCliente' field has been set.
      * @return True if the 'idInternoDelCliente' field has been set, false otherwise.
      */
    public boolean hasIdInternoDelCliente() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'idInternoDelCliente' field.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder clearIdInternoDelCliente() {
      idInternoDelCliente = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eMail' field.
      * @return The value.
      */
    public java.lang.CharSequence getEMail() {
      return eMail;
    }


    /**
      * Sets the value of the 'eMail' field.
      * @param value The value of 'eMail'.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder setEMail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.eMail = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eMail' field has been set.
      * @return True if the 'eMail' field has been set, false otherwise.
      */
    public boolean hasEMail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eMail' field.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder clearEMail() {
      eMail = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'telefonos' field.
      * @return The value.
      */
    public java.util.List<Integracion.Esquemas.Referencias.Telefono> getTelefonos() {
      return telefonos;
    }


    /**
      * Sets the value of the 'telefonos' field.
      * @param value The value of 'telefonos'.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder setTelefonos(java.util.List<Integracion.Esquemas.Referencias.Telefono> value) {
      validate(fields()[4], value);
      this.telefonos = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'telefonos' field has been set.
      * @return True if the 'telefonos' field has been set, false otherwise.
      */
    public boolean hasTelefonos() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'telefonos' field.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder clearTelefonos() {
      telefonos = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'agrupador' field.
      * @return The value.
      */
    public java.lang.CharSequence getAgrupador() {
      return agrupador;
    }


    /**
      * Sets the value of the 'agrupador' field.
      * @param value The value of 'agrupador'.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder setAgrupador(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.agrupador = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'agrupador' field has been set.
      * @return True if the 'agrupador' field has been set, false otherwise.
      */
    public boolean hasAgrupador() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'agrupador' field.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder clearAgrupador() {
      agrupador = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tipoDeDocumento' field.
      * @return The value.
      */
    public Integracion.Esquemas.Referencias.TipoDeDocumento getTipoDeDocumento() {
      return tipoDeDocumento;
    }


    /**
      * Sets the value of the 'tipoDeDocumento' field.
      * @param value The value of 'tipoDeDocumento'.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder setTipoDeDocumento(Integracion.Esquemas.Referencias.TipoDeDocumento value) {
      validate(fields()[6], value);
      this.tipoDeDocumento = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tipoDeDocumento' field has been set.
      * @return True if the 'tipoDeDocumento' field has been set, false otherwise.
      */
    public boolean hasTipoDeDocumento() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tipoDeDocumento' field.
      * @return This builder.
      */
    public Integracion.Esquemas.Referencias.DatosPersonales.Builder clearTipoDeDocumento() {
      tipoDeDocumento = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DatosPersonales build() {
      try {
        DatosPersonales record = new DatosPersonales();
        record.numeroDeDocumento = fieldSetFlags()[0] ? this.numeroDeDocumento : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.nombreCompleto = fieldSetFlags()[1] ? this.nombreCompleto : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.idInternoDelCliente = fieldSetFlags()[2] ? this.idInternoDelCliente : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.eMail = fieldSetFlags()[3] ? this.eMail : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.telefonos = fieldSetFlags()[4] ? this.telefonos : (java.util.List<Integracion.Esquemas.Referencias.Telefono>) defaultValue(fields()[4]);
        record.agrupador = fieldSetFlags()[5] ? this.agrupador : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.tipoDeDocumento = fieldSetFlags()[6] ? this.tipoDeDocumento : (Integracion.Esquemas.Referencias.TipoDeDocumento) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DatosPersonales>
    WRITER$ = (org.apache.avro.io.DatumWriter<DatosPersonales>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DatosPersonales>
    READER$ = (org.apache.avro.io.DatumReader<DatosPersonales>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.numeroDeDocumento == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.numeroDeDocumento);
    }

    if (this.nombreCompleto == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.nombreCompleto);
    }

    if (this.idInternoDelCliente == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.idInternoDelCliente);
    }

    if (this.eMail == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eMail);
    }

    if (this.telefonos == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.telefonos.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (Integracion.Esquemas.Referencias.Telefono e0: this.telefonos) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.agrupador == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.agrupador);
    }

    out.writeEnum(this.tipoDeDocumento.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.numeroDeDocumento = null;
      } else {
        this.numeroDeDocumento = in.readString(this.numeroDeDocumento instanceof Utf8 ? (Utf8)this.numeroDeDocumento : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nombreCompleto = null;
      } else {
        this.nombreCompleto = in.readString(this.nombreCompleto instanceof Utf8 ? (Utf8)this.nombreCompleto : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.idInternoDelCliente = null;
      } else {
        this.idInternoDelCliente = in.readString(this.idInternoDelCliente instanceof Utf8 ? (Utf8)this.idInternoDelCliente : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eMail = null;
      } else {
        this.eMail = in.readString(this.eMail instanceof Utf8 ? (Utf8)this.eMail : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.telefonos = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<Integracion.Esquemas.Referencias.Telefono> a0 = this.telefonos;
        if (a0 == null) {
          a0 = new SpecificData.Array<Integracion.Esquemas.Referencias.Telefono>((int)size0, SCHEMA$.getField("telefonos").schema().getTypes().get(1));
          this.telefonos = a0;
        } else a0.clear();
        SpecificData.Array<Integracion.Esquemas.Referencias.Telefono> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Integracion.Esquemas.Referencias.Telefono>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            Integracion.Esquemas.Referencias.Telefono e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new Integracion.Esquemas.Referencias.Telefono();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.agrupador = null;
      } else {
        this.agrupador = in.readString(this.agrupador instanceof Utf8 ? (Utf8)this.agrupador : null);
      }

      this.tipoDeDocumento = Integracion.Esquemas.Referencias.TipoDeDocumento.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.numeroDeDocumento = null;
          } else {
            this.numeroDeDocumento = in.readString(this.numeroDeDocumento instanceof Utf8 ? (Utf8)this.numeroDeDocumento : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nombreCompleto = null;
          } else {
            this.nombreCompleto = in.readString(this.nombreCompleto instanceof Utf8 ? (Utf8)this.nombreCompleto : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.idInternoDelCliente = null;
          } else {
            this.idInternoDelCliente = in.readString(this.idInternoDelCliente instanceof Utf8 ? (Utf8)this.idInternoDelCliente : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eMail = null;
          } else {
            this.eMail = in.readString(this.eMail instanceof Utf8 ? (Utf8)this.eMail : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.telefonos = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<Integracion.Esquemas.Referencias.Telefono> a0 = this.telefonos;
            if (a0 == null) {
              a0 = new SpecificData.Array<Integracion.Esquemas.Referencias.Telefono>((int)size0, SCHEMA$.getField("telefonos").schema().getTypes().get(1));
              this.telefonos = a0;
            } else a0.clear();
            SpecificData.Array<Integracion.Esquemas.Referencias.Telefono> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Integracion.Esquemas.Referencias.Telefono>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                Integracion.Esquemas.Referencias.Telefono e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new Integracion.Esquemas.Referencias.Telefono();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.agrupador = null;
          } else {
            this.agrupador = in.readString(this.agrupador instanceof Utf8 ? (Utf8)this.agrupador : null);
          }
          break;

        case 6:
          this.tipoDeDocumento = Integracion.Esquemas.Referencias.TipoDeDocumento.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










